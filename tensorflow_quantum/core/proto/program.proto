syntax = "proto3";

package tfq.proto;

// A quantum program.
message Program {
  // The language in which the program is written.
  Language language = 1;

  // Programs can be specified by a circuit or a schedule.
  oneof program {
    // A circuit is an abstract representation as a series of moments, each
    // moment having a set of gates that act on disjoint qubits. Circuits don't
    // have absolute times for their operations (gates acting on qubits).
    Circuit circuit = 2;

    // Schedules are a list of operations (gates acting on qubits) that specify
    // absolute start times for the operations.
    Schedule schedule = 3;
  }
}

// The quantum circuit, specified as a series of moments (abstract
// slices of times with gates acting on disjoint sets of qubits).
message Circuit {
  // How the circuit is scheduled.
  enum SchedulingStrategy {
    // The scheduling strategy is unspecified.
    SCHEDULING_STRATEGY_UNSPECIFIED = 0;

    // Each operation in a moment starts at the same time. The start of the
    // next moment is given by the duration of the longest operation in
    // the current moment.
    MOMENT_BY_MOMENT = 1;
  }

  SchedulingStrategy scheduling_strategy = 1;

  // The moments of the circuit, with the first element corresponding to the
  // first set of operations to apply, etc.
  repeated Moment moments = 2;
}

// A moment is a collection of operations that operate on a disjoint set of
// qubits. Conceptually a moment represents operations that all occurring
// the same finite period of time.
message Moment {
  // All of the operations in the moment. Each operation must act on different
  // qubits.
  repeated Operation operations = 1;
}

// The quantum circuit, specified as a series of operations at specific
// start times.
message Schedule {
  // A list of all the operations and their absolute start times.
  repeated ScheduledOperation scheduled_operations = 3;
}

// An operation occurring at a specific start time.
message ScheduledOperation {
  // Which operation is to be scheduled.
  Operation operation = 1;

  // The start time of the operation, with zero representing the absolute
  // start of the circuit.
  //
  // This must be consistent with the moment structure and must be positive.
  int64 start_time_picos = 2;
}

// The language in which the program is expressed.
message Language {
  // The name of the gate set being used.
  //
  // Valid names for the gate sets can be found in cirq/google/gate_sets.py.
  string gate_set = 1;

  // The language supported by ArgFunctions. These specifies what allowed
  // ArgFunction types there are.
  //
  // Valid names for the arg function language can be found in
  // cirq/google/arg_func_langs.py
  string arg_function_language = 2;
}

// An operation acts on a set of qubits.
message Operation {
  // Which gate this operation corresponds to.
  Gate gate = 1;

  // Map from the argument name to the Argument needed to fully specify
  // the gate.
  map<string, Arg> args = 2;

  // Which qubits the operation acts on.
  repeated Qubit qubits = 3;
}

// The instruction identifying the action taken on the quantum computer.
message Gate {
  // Name for the Gate.
  //
  // These names must match those specified in the gate set.  This is found
  // in cirq/google/gate_sets.py.
  string id = 1;
}

// An identifier for a qubit.
message Qubit {
  // Id of the qubit. These depend on the device being scheduled upon.
  //
  // Typically ids for qubits on a line are simple string versions of integers,
  // while for qubits on a square grid these are integers separated by a
  // underscore, i.e. '0_1', '1_2', etc.
  string id = 2;
}

// Arguments needed to specify a gate.
message Arg {
  // Arguments are either a number, a symbol, or an argument function
  // (which recursively depends on Arg).
  //
  // ArgValue is used to specify an argument that does not vary
  // depending on RunContext.
  //
  // Symbol is used when an argument will be resolved (supplied a value)
  // by a Run Context.
  //
  // Functions are used to define a simple s-expression tree describing
  // how to combine numbers and symbols mathematically.
  oneof arg {
    ArgValue arg_value = 1;
    string symbol = 2;
    ArgFunction func = 3;
  }
}

// Value that can be passed as an argument to a gate.
message ArgValue {
  oneof arg_value {
    float float_value = 1;
    RepeatedBoolean bool_values = 2;
    string string_value = 3;
    double double_value = 4;
  }
}

// A repeated boolean value.
message RepeatedBoolean {
  repeated bool values = 1;
}

// A function of arguments. This is an s-expression tree representing
// mathematically the function being evaluated.
//
// What language is supported is specified by the arg_function_language
// in the language message.
message ArgFunction {
  // The name of the function. I.e. if the function is the sum of two symbols,
  // this could be '+', and the args would be two string symbol values.
  //
  // Valid values for the type are given in cirq/google/arg_func_langs.py
  // and must be consistent with the arg_function_language specified in the
  // language field of the program.
  string type = 1;

  // The arguments to the function.
  repeated Arg args = 2;
}