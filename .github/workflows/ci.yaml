name: Continuous Integration

on: [pull_request, workflow_dispatch]


jobs:
  # lint:
  #   name: Lint check
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.10'
  #         architecture: 'x64'
  #     - name: Install Lint tools
  #       run: pip install --upgrade pip setuptools; pip install -r requirements.txt;
  #     - name: Lint All
  #       run: ./scripts/lint_all.sh

  # format:
  #   name: Formatting check
  #   runs-on: ubuntu-20.04

  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.10'
  #         architecture: 'x64'
  #     - name: Install Format tools
  #       run: pip install --upgrade pip setuptools; pip install -r requirements.txt; sudo apt-get install -y clang-format-6.0
  #     - name: Format Check
  #       run: ./scripts/format_check.sh

  # wheel-build:
  #   name: Wheel test
  #   runs-on: ubuntu-20.04

  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.10'
  #         architecture: 'x64'
  #     - name: Install Bazel on CI
  #       run: ./scripts/ci_install.sh
  #     - name: Configure CI TF
  #       run: echo "Y\n" | ./configure.sh
  #     - name: Build Wheel Test
  #       run: ./scripts/build_pip_package_test.sh
  #     - name: Test Wheel
  #       run: ./scripts/run_example.sh

  # bazel-tests:
  #   name: Library tests
  #   runs-on: ubuntu-20.04
  #   needs: [lint, format]

  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.10'
  #         architecture: 'x64'
  #     - name: Install Bazel on CI
  #       run: ./scripts/ci_install.sh
  #     - name: Configure CI TF
  #       run: echo "Y\n" | ./configure.sh
  #     - name: Full Library Test
  #       run: ./scripts/test_all.sh

  leak-tests:
    name: Memory Leak tests
    runs-on: ubuntu-20.04
    # needs: [lint, format]

    steps:
      - name: Check out a copy of the TFQ repository.
        uses: actions/checkout@v4

      - name: Set up Bazel.
        uses: bazel-contrib/setup-bazel@0.9.1
        env:
          USE_BAZEL_VERSION: 6.5.0
        with:
          # Avoid downloading Bazel every time.
          bazelisk-cache: true
          # Store build cache per workflow.
          disk-cache: ${{ github.workflow }}
          # Share repository cache between workflows.
          repository-cache: true

      - name: Set up Python.
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          architecture: 'x64'

      - name: Set up cache for Python dependencies.
        uses: actions/cache@v4
        id: cache
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ env.pythonLocation }}-${{ hashFiles('requirements.txt') }}
          enableCrossOsArchive: true

      - name: Install Python dependencies if needed.
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt

      - name: Configure TF and TFQ.
        run: echo "Y\n" | ./configure.sh

      - name: Perform memory leakage test on qsim and TFQ src.
        run: ./scripts/msan_test.sh
        continue-on-error: true

      - name: Save Bazel output as downloadable artifacts.
        uses: actions/upload-artifact@v4
        with:
          name: bazel-out
          retention-days: 7
          include-hidden-files: true
          path: |
            /home/runner/.bazel/execroot/__main__/bazel-out/
            !/home/runner/.bazel/execroot/__main__/bazel-out/**/*.so
            !/home/runner/.bazel/execroot/__main__/bazel-out/**/*.o
            !/home/runner/.bazel/execroot/__main__/bazel-out/**/_objs
            !/home/runner/.bazel/execroot/__main__/bazel-out/**/_solib_k8

  # saving-test:
  #   name: Test saving artifactes
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - name: Make a test file
  #       run: echo test > test.log
  #     - name: Save artifacts
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: foo
  #         path: test.log


  # tutorials-test:
  #   name: Tutorial tests
  #   runs-on: ubuntu-20.04
  #   needs: [lint, format, wheel-build]

  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.10'
  #         architecture: 'x64'
  #     - name: Install notebook dependencies
  #       run: pip install --upgrade pip seaborn==0.10.0
  #     - name: Install Bazel on CI
  #       run: ./scripts/ci_install.sh
  #     - name: Configure CI TF
  #       run: echo "Y\n" | ./configure.sh
  #     - name: Build Wheel
  #       run: ./scripts/build_pip_package_test.sh
  #     - name: Test Notebooks
  #       run: ./scripts/ci_validate_tutorials.sh
