name: Continuous Integration

on: [pull_request, workflow_dispatch]

env:
  arch: 'x64'
  py-version: '3.10'
  py-venv-path: '.venv'
  bazel-output: '.bazel'

jobs:
  set-up-python:
    name: Create and cache Python environment.
    runs-on: ubuntu-20.04
    steps:
      - name: Check out a copy of the TFQ git repository.
        uses: actions/checkout@v4

      - name: Configure a cache for the Python environment.
        uses: actions/cache@v4
        id: cache
        with:
          key: venv-${{runner.os}}-${{env.py-version}}-${{hashFiles('requirements.txt')}}
          # actions/cache is generic; what is cached is determined by setting
          # the following variable. Later steps in this job assume this path.
          path: ${{env.py-venv-path}}

      - name: Inform the user about the Python cache status.
        run: |
          if [ "${{steps.cache.outputs.cache-hit}}" == "true" ]; then
            echo "Found cached Python ${{env.py-version}} environment."
            echo "Will use it and skip pip install steps."
          else
            echo "No cached Python environment found."
          fi

        # Note that The remaining steps in this job test the cache-hit result
        # and only execute if it's false.

      - name: Set up Python.
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/setup-python@v5
        with:
          python-version: ${{env.py-version}}
          architecture: ${{env.arch}}

      - name: Install Python dependencies into the Python environment.
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          python -m venv ${{env.py-venv-path}}
          source ${{env.py-venv-path}}/bin/activate
          pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
          echo "$VIRTUAL_ENV/bin" >> $GITHUB_PATH
          echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV

  set-up-bazel:
    name: Install and cache a copy of Bazel.
    runs-on: ubuntu-20.04
    steps:
      - name: Set up Bazel.
        uses: bazel-contrib/setup-bazel@0.9.1
        env:
          USE_BAZEL_VERSION: 6.5.0
        with:
          # Avoid downloading Bazel every time.
          bazelisk-cache: true
          # Store build cache per workflow.
          disk-cache: ${{github.workflow}}
          # Share repository cache between workflows.
          repository-cache: true
          # Cache external/  repositories.
          external-cache: true

  build-tfq:
    name: Configure, build, and cache a copy of the current version of TFQ.
    needs: [set-up-bazel, set-up-python]
    runs-on: ubuntu-20.04
    steps:
      - name: Check out a copy of the TFQ git repository.
        uses: actions/checkout@v4

      # - name: Install Python.
      #   uses: actions/setup-python@v5
      #   with:
      #     python-version: ${{env.py-version}}
      #     architecture: ${{env.arch}}

      # - name: Restore cached Python virtualenv.
      #   uses: actions/cache/restore@v4
      #   with:
      #     key: venv-${{runner.os}}-${{env.py-version}}-${{hashFiles('requirements.txt')}}
      #     path: ${{env.py-venv-path}}
      #     enableCrossOsArchive: true

      # - name: Activate the virtualenv for this job.
      #   run: |
      #     source ${{env.py-venv-path}}/bin/activate
      #     echo "$VIRTUAL_ENV/bin" >> $GITHUB_PATH
      #     echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV

      - name: Configure TF and TFQ.
        run: echo "Y\n" | ./configure.sh


  # lint:
  #   name: Lint check
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.10'
  #         architecture: 'x64'
  #     - name: Install Lint tools
  #       run: pip install --upgrade pip setuptools; pip install -r requirements.txt;
  #     - name: Lint All
  #       run: ./scripts/lint_all.sh

  # format:
  #   name: Formatting check
  #   runs-on: ubuntu-20.04

  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.10'
  #         architecture: 'x64'
  #     - name: Install Format tools
  #       run: pip install --upgrade pip setuptools; pip install -r requirements.txt; sudo apt-get install -y clang-format-6.0
  #     - name: Format Check
  #       run: ./scripts/format_check.sh

  # wheel-build:
  #   name: Wheel test
  #   runs-on: ubuntu-20.04

  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.10'
  #         architecture: 'x64'
  #     - name: Install Bazel on CI
  #       run: ./scripts/ci_install.sh
  #     - name: Configure CI TF
  #       run: echo "Y\n" | ./configure.sh
  #     - name: Build Wheel Test
  #       run: ./scripts/build_pip_package_test.sh
  #     - name: Test Wheel
  #       run: ./scripts/run_example.sh

  # bazel-tests:
  #   name: Library tests
  #   runs-on: ubuntu-20.04
  #   needs: [lint, format]

  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.10'
  #         architecture: 'x64'
  #     - name: Install Bazel on CI
  #       run: ./scripts/ci_install.sh
  #     - name: Configure CI TF
  #       run: echo "Y\n" | ./configure.sh
  #     - name: Full Library Test
  #       run: ./scripts/test_all.sh

  run-leak-tests:
    name: Memory Leak tests
    needs: [set-up-bazel, set-up-python, build-tfq]
    runs-on: ubuntu-20.04
    # needs: [lint, format]

    steps:
      - name: Check out a copy of the TFQ git repository.
        uses: actions/checkout@v4
9
      # - name: Install Python.
      #   uses: actions/setup-python@v5
      #   with:
      #     python-version: ${{env.py-version}}
      #     architecture: ${{env.arch}}

      # - name: Restore cached Python virtualenv.
      #   uses: actions/cache/restore@v4
      #   with:
      #     key: venv-${{runner.os}}-${{env.py-version}}-${{hashFiles('requirements.txt')}}
      #     path: ${{env.py-venv-path}}
      #     enableCrossOsArchive: true

      # - name: Activate the virtualenv for this job.
      #   run: |
      #     source ${{env.py-venv-path}}/bin/activate
      #     echo "$VIRTUAL_ENV/bin" >> $GITHUB_PATH
      #     echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV

      # - name: Configure TF and TFQ.
      #   run: echo "Y\n" | ./configure.sh

      - name: Perform memory leakage test on qsim and TFQ src.
        run: ./scripts/msan_test.sh 2>&1 | tee bazel-output.log
        continue-on-error: true

      # - name: Save Bazel output as downloadable artifacts.
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: bazel-out
      #     retention-days: 14
      #     include-hidden-files: true
      #     path: |
      #       bazel-output.log
      #       /home/runner/.bazel/execroot/__main__/bazel-out/
      #       !/home/runner/.bazel/execroot/__main__/bazel-out/**/*.so
      #       !/home/runner/.bazel/execroot/__main__/bazel-out/**/*.o
      #       !/home/runner/.bazel/execroot/__main__/bazel-out/**/_objs
      #       !/home/runner/.bazel/execroot/__main__/bazel-out/**/_solib_k8

  # saving-test:
  #   name: Test saving artifactes
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - name: Make a test file
  #       run: echo test > test.log
  #     - name: Save artifacts
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: foo
  #         path: test.log


  # tutorials-test:
  #   name: Tutorial tests
  #   runs-on: ubuntu-20.04
  #   needs: [lint, format, wheel-build]

  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.10'
  #         architecture: 'x64'
  #     - name: Install notebook dependencies
  #       run: pip install --upgrade pip seaborn==0.10.0
  #     - name: Install Bazel on CI
  #       run: ./scripts/ci_install.sh
  #     - name: Configure CI TF
  #       run: echo "Y\n" | ./configure.sh
  #     - name: Build Wheel
  #       run: ./scripts/build_pip_package_test.sh
  #     - name: Test Notebooks
  #       run: ./scripts/ci_validate_tutorials.sh
