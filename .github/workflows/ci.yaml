# Copyright 2024 The TensorFlow Quantum Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Summary: GitHub continuous integration workflow for TensorFlow Quantum.
#
# This workflow is executed on pull requests. It test and validates code
# changes before they are merged into the main codebase.
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

name: Continuous integration

on:
  pull_request:
  workflow_dispatch:
    save_artifacts:
      description: Save build artifacts & make them available for downloading.
      type: boolean

env:
  arch: x64
  py_version: '3.10'
  venv: ./.venv
  bazel_version: '6.5.0'
  save_artifacts: false
  GH_TOKEN: ${{github.token}}

permissions:
  actions: write
  # TODO: not needed but leaving until "resource not accessible ..." is solved
  contents: write
  pull-requests: write

run-name: Run CI for "${{github.event.pull_request.title || github.event.workflow_dispatch.display_title}}" by @${{github.triggering_actor}}
jobs:
  # set-up-bazel:
  #   name: Install & cache a copy of Bazel
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - name: Set up Bazel
  #       uses: bazel-contrib/setup-bazel@0.9.1
  #       env:
  #         USE_BAZEL_VERSION: ${{env.bazel_version}}
  #       with:
  #         # Avoid downloading Bazel every time.
  #         bazelisk-cache: true
  #         # Store build cache per workflow.
  #         disk-cache: ${{github.workflow}}
  #         # Share repository cache between workflows.
  #         repository-cache: true
  #         # Cache external/  repositories.
  #         external-cache: true

  #     - run: |
  #         # Save information to the run log, in case it's needed for debugging.
  #         set -x -e
  #         uname -a
  #         which bazel
  #         bazel --version

  set-up-python:
    name: Create & cache Python environment
    runs-on: ubuntu-20.04
    steps:
      - name: Check out a copy of the TFQ git repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{env.py_version}}
          architecture: ${{env.arch}}

      - name: Set the cache key for the Python virtualenv cache
        run: |
          set -x -e
          base="venv-${{env.py_version}}-${{env.arch}}"
          key="$base-${{hashFiles('requirements.txt')}}"
          echo "venv_cache_key=$key" >> $GITHUB_ENV

      - name: Configure the cache for the Python virtualenv
        uses: actions/cache@v4
        id: cache
        with:
          path: ${{env.venv}}
          key: ${{env.venv_cache_key}}

      - name: Test whether the virtualenv cache is already populated
        run: |
          if [ ${{steps.cache.outputs.cache-hit}} == true ]; then
            echo "Found cached virtualenv for Python ${{env.py_version}}."
            echo "Will use it and skip remaining 'pip install' steps."
          else
            echo "No cached Python virtualenv found; proceeding to create one."
          fi

      - name: Install Python dependencies into the virtualenv if needed
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          set -x -e
          python -m venv ${{env.venv}}
          source ${{env.venv}}/bin/activate
          pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
          echo "$VIRTUAL_ENV/bin" >> $GITHUB_PATH
          echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV
          echo "PATH=$PATH" >> $GITHUB_ENV
          # Save information to the run log, in case it's needed for debugging.
          which python
          python --version
          python3 -c 'import site; print(site.getsitepackages())'
          python3 -c 'import tensorflow as tf; print(tf.version.VERSION)'

      - name: Delete the previous virtualenv cache contents
        if: steps.cache.outputs.cache-hit == 'true'
        continue-on-error: true
        run: |
          gh extension install actions/gh-actions-cache
          gh actions-cache delete "${{env.venv_cache_key}}" --confirm

      - name: Save the updated Python virtualenv
        uses: actions/cache/save@v4
        with:
          path: ${{env.venv}}
          key: ${{env.venv_cache_key}}

  build-tfq:
    name: Configure, build, & cache TFQ
    needs: [set-up-python]
    runs-on: ubuntu-20.04
    steps:
      - name: Check out a copy of the TFQ git repository
        uses: actions/checkout@v4

      - name: Set up Bazel
        uses: bazel-contrib/setup-bazel@0.9.1
        env:
          USE_BAZEL_VERSION: ${{env.bazel_version}}
        with:
          # Avoid downloading Bazel every time.
          bazelisk-cache: true
          # Store build cache per workflow.
          disk-cache: ${{github.workflow}}
          # Share repository cache between workflows.
          repository-cache: true
          # Cache external/  repositories.
          external-cache: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{env.py_version}}
          architecture: ${{env.arch}}

      - name: Restore cached Python virtualenv
        uses: actions/cache@v4
        with:
          path: ${{env.venv}}
          key: venv-${{env.py_version}}-${{env.arch}}-${{hashFiles('requirements.txt')}}
#          restore-keys: venv-${{env.py_version}}-${{env.arch}}-${{hashFiles('requirements.txt')}}
          enableCrossOsArchive: true

      - name: Activate the Python virtualenv for this job
        run: |
          set -x -e
          source ${{env.venv}}/bin/activate
          echo "$VIRTUAL_ENV/bin" >> $GITHUB_PATH
          echo "$GITHUB_PATH"

      - name: Test whether we've already installed TFQ into the virtualenv
        id: cache
        run: |
          if pip freeze | grep -q tensorflow-quantum; then
            echo "Found tensorflow-quantum in pip list."
            echo "Will skip build & install steps."
            echo "have_tfq=true" >> "$GITHUB_OUTPUT"
          else
            echo "Tensorflow-quantum not found in pip list."
            echo "have_tfq=false" >> "$GITHUB_OUTPUT"
          fi

        # Remaining steps test have_tfq and are skipped if the value is false.

      - name: Set up a cache for the Bazel configuration
        if: steps.cache.outputs.have_tfq != 'true'
        uses: actions/cache@v4
        with:
          path: bazel-cache
          key: bazel-${{env.bazel_version}}-${{runner.os}}-${{env.arch}}-${{env.py_version}}

      - name: Configure TFQ
        if: steps.cache.outputs.have_tfq != 'true'
        run: |
          set -x -e
          echo "Y\n" | ./configure.sh
          mkdir -p bazel-cache
          cp .bazelrc bazel-cache/

      - name: Build wheel for TFQ and install it into the Python virtualenv
        if: steps.cache.outputs.have_tfq != 'true'
        # run: |
        #   ./scripts/build_pip_package_test.sh
        run: |
          set -x -e
          bazel build -c opt --cxxopt="-msse2" --cxxopt="-msse3" --cxxopt="-msse4" release:build_pip_package
          rm -f /tmp/tensorflow_quantum/*
          bazel-bin/release/build_pip_package /tmp/tensorflow_quantum/
          pip install -U /tmp/tensorflow_quantum/*.whl

      # - name: Save the updated Python virtualenv
      #   if: steps.cache.outputs.have_tfq != 'true'
      #   uses: actions/cache/save@v4
      #   with:
      #     path: ${{env.venv}}
      #     key: venv-${{env.py_version}}-${{env.arch}}-${{hashFiles('requirements.txt')}}
      #     enableCrossOsArchive: true


  # lint:
  #   name: Lint check
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.10'
  #         architecture: 'x64'
  #     - name: Install Lint tools
  #       run: pip install --upgrade pip setuptools; pip install -r requirements.txt;
  #     - name: Lint All
  #       run: ./scripts/lint_all.sh

  # format:
  #   name: Formatting check
  #   runs-on: ubuntu-20.04

  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.10'
  #         architecture: 'x64'
  #     - name: Install Format tools
  #       run: pip install --upgrade pip setuptools; pip install -r requirements.txt; sudo apt-get install -y clang-format-6.0
  #     - name: Format Check
  #       run: ./scripts/format_check.sh

  # wheel-build:
  #   name: Wheel test
  #   runs-on: ubuntu-20.04

  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.10'
  #         architecture: 'x64'
  #     - name: Install Bazel on CI
  #       run: ./scripts/ci_install.sh
  #     - name: Configure CI TF
  #       run: echo "Y\n" | ./configure.sh
  #     - name: Build Wheel Test
  #       run: ./scripts/build_pip_package_test.sh
  #     - name: Test Wheel
  #       run: ./scripts/run_example.sh

  # bazel-tests:
  #   name: Library tests
  #   runs-on: ubuntu-20.04
  #   needs: [lint, format]

  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.10'
  #         architecture: 'x64'
  #     - name: Install Bazel on CI
  #       run: ./scripts/ci_install.sh
  #     - name: Configure CI TF
  #       run: echo "Y\n" | ./configure.sh
  #     - name: Full Library Test
  #       run: ./scripts/test_all.sh

  run-leak-tests:
    name: Test for memory leaks
    # needs: [lint, format]
    needs: [set-up-python, build-tfq]
    runs-on: ubuntu-20.04

    steps:
      - name: Check out a copy of the TFQ git repository
        uses: actions/checkout@v4

      - name: Set up Bazel
        uses: bazel-contrib/setup-bazel@0.9.1
        env:
          USE_BAZEL_VERSION: ${{env.bazel_version}}
        with:
          # Avoid downloading Bazel every time.
          bazelisk-cache: true
          # Store build cache per workflow.
          disk-cache: ${{github.workflow}}
          # Share repository cache between workflows.
          repository-cache: true
          # Cache external/  repositories.
          external-cache: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{env.py_version}}
          architecture: ${{env.arch}}
          cache: ${{env.venv}}

      - name: Activate the Python virtualenv for this job
        run: |
          set -x -e
          source ${{env.venv}}/bin/activate
          echo "$VIRTUAL_ENV/bin" >> $GITHUB_PATH
          echo "$GITHUB_PATH"

      # - name: Restore cached Python virtualenv
      #   uses: actions/cache/restore@v4
      #   with:
      #     path: ${{env.venv}}
      #     key: venv-${{env.py_version}}-${{env.arch}}-${{hashFiles('requirements.txt')}}
      #     enableCrossOsArchive: true
      # - run: |
      #     set -x -e
      #     source ${{env.venv}}/bin/activate
      #     echo "$VIRTUAL_ENV/bin" >> $GITHUB_PATH
      #     echo "$GITHUB_PATH"

      - name: Perform memory leakage test on qsim and TFQ src
        run: ./scripts/msan_test.sh 2>&1 | tee bazel-output.log
        continue-on-error: true

      # - name: Save Bazel output as downloadable artifacts
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: bazel-out
      #     retention-days: 14
      #     include-hidden-files: true
      #     path: |
      #       bazel-output.log
      #       /home/runner/.bazel/execroot/__main__/bazel-out/
      #       !/home/runner/.bazel/execroot/__main__/bazel-out/**/*.so
      #       !/home/runner/.bazel/execroot/__main__/bazel-out/**/*.o
      #       !/home/runner/.bazel/execroot/__main__/bazel-out/**/_objs
      #       !/home/runner/.bazel/execroot/__main__/bazel-out/**/_solib_k8

  # tutorials-test:
  #   name: Tutorial tests
  #   runs-on: ubuntu-20.04
  #   needs: [lint, format, wheel-build]

  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.10'
  #         architecture: 'x64'
  #     - name: Install notebook dependencies
  #       run: pip install --upgrade pip seaborn==0.10.0
  #     - name: Install Bazel on CI
  #       run: ./scripts/ci_install.sh
  #     - name: Configure CI TF
  #       run: echo "Y\n" | ./configure.sh
  #     - name: Build Wheel
  #       run: ./scripts/build_pip_package_test.sh
  #     - name: Test Notebooks
  #       run: ./scripts/ci_validate_tutorials.sh
